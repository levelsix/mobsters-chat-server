package ChatEvent;


option java_package = "com.lvl6.chatserver";


import "chat.proto";

//high level actions:
//==========================





//send message
//receive Message
//send typing status
//send read confirmation
//login
//logout
//receive online status
//create chat room
//add user to chat room
//create user
//set user details
//change translation settings
//remove user from chat room


enum EventResponseStatus {
  SUCCESS = 1;
  ERROR = 2;
}


enum ChatEventType {
  SEND_MESSAGE = 1;
  SEND_GAME_EVENT_REQUEST = 2;
}

//any event
message ChatEventProto {
  optional ChatEventType eventname = 1;
  optional bytes data = 2;
  optional string uuid = 3;
}

//create user
message CreateUserRequestProto {
  optional string uuid = 1;
}

message CreateUserResponseProto {
  optional EventResponseStatus status = 1;
}


//send message
message SendMessageRequestProto {
  optional string uuid = 1;
  optional string content = 2;
  optional string roomuuid = 3;
}

message SendMessageResponseProto {
  optional EventResponseStatus status = 1;
}

//receive message
message receiveMessageProto {
  optional Chat.ChatMessageProto message = 1;
}

//retrieve room messages
message retrieveRoomMessagesRequestProto {
  optional string roomuuid = 1;
}

message retrieveRoomMessagesResponseProto {
  optional EventResponseStatus status = 1;
  repeated Chat.ChatMessageProto message = 2;
}

//set typing status
message setTypingStatusRequestProto {
  optional string roomuuid = 1;
  optional string useruuid = 2;
  optional bool typingstatus = 3;
}

message setTypingStatusResponseProto {
  optional EventResponseStatus status = 1;
}

//receive typing status
message receiveTypingStatusProto {
  optional string roomuuid = 1;
  optional string useruuid = 2;
  optional bool typingstatus = 3;
}

//send read confirmation
message sendReadConfirmationRequestProto {
  repeated string chatmessageuuid = 1;
  optional string useruuid = 2;
}

message sendReadConfirmationResponseProto {
  optional EventResponseStatus status = 1;
}

//receive red confirmation
message receiveReadConfirmationProto {
  repeated string chatmessageuuid = 1;
  optional string useruuid = 2;
}

//login
message loginRequestProto {
  optional string useruuid = 1;
  //broadcasts online status to all people
}

message loginResponseProto {
  optional EventResponseStatus status = 1;
  //TODO !!! remove this for rooms that user is not the owner of
  repeated Chat.ChatRoomProto room = 2;
}

//logout
message logoutRequestProto {
  optional string useruuid = 1;
}
message logoutResponseProto {
  optional EventResponseStatus status = 1;
}

//receive online status
message receiveOnlineStatusProto {
  optional string useruuid = 1;
  optional bool onlinestatus = 2;
}

//create chat room request
message createChatRoomRequestProto {
  optional string useruuid = 1;
  optional string roomname = 2;
}

message createChatRoomResponseProto {
  optional EventResponseStatus status = 1;
  //TODO !!! remove this for rooms that user is not the owner of
  repeated Chat.ChatRoomProto room = 2;
}

//add user to chat room
message addUserToChatRoomRequestProto {
  optional string useruuid = 1;
  optional string roomuuid = 2;
}
message addUserToChatRoomResponseProto {
  optional EventResponseStatus status = 1;
}

//set user details
message setUserDetailsRequestProto {
  optional string useruuid = 1;
  optional Chat.ChatUserDetailsProto details = 2;
}

//set user details
message setUserDetailsResponseProto {
  optional EventResponseStatus status = 1;
}

//set room translation settings
message setRoomTranslationSettingsRequestProto {
  optional string useruuid = 1;
  optional string roomuuid = 2;
  optional Chat.TranslateLanguage language = 3;
  repeated Chat.ChatMessageProto messages = 4;
}
message setRoomTranslationSettingsResponseProto {
  optional EventResponseStatus status = 1;
  repeated Chat.ChatMessageProto messages = 2;
}

//remove user from chat room
message removeUserFromChatRoomRequestProto {
  optional string useruuid = 1;
  optional string roomuuid = 2;
}
message removeUserFromChatRoomResponseProto {
  optional EventResponseStatus status = 1;
}

//receive room notification
message receiveRoomNotificationProto {
  optional string roomuuid = 1;
  optional string content = 2;
}