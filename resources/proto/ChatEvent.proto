package ChatApi;

import "Chat.proto";

//high level actions:
//==========================
//send message
//receive Message
//send typing status
//send read confirmation
//login
//logout
//receive online status
//create chat room
//add user to chat room
//create user
//set user details
//change translation settings
//remove user from chat room


enum EventResponseStatus {
    SUCCESS = 1;
    ERROR = 2;
}


enum ChatEventType {
    SEND_MESSAGE = 1;
    SEND_GAME_EVENT_REQUEST = 2;

}

message ChatEventProto {

    optional ChatEventType eventname = 1;
    optional bytes data = 2;
    optional string uuid = 3;

}

message CreateUserRequestProto {

    optional string uuid = 1;

}

message sendMessageRequestProto {

    optional string uuid = 1;
    optional string content = 2;
    optional string roomuuid = 3;

}

message SendMessageResponseProto {

    optional EventResponseStatus status = 1;

}

message receiveMessage {

    optional ChatMessageProto message = 1;

}

message retrieveRoomMessagesRequestProto {

    optional string roomuuid = 1;

}

message retrieveRoomMessagesResponseProto {

    optional EventResponseStatus status = 1;
    repeated ChatMessageProto message = 2;

}

message setTypingStatusRequestProto {

    optional string roomuuid = 1;
    optional string useruuid = 2;
    optional bool typingstatus = 3;

}

message setTypingStatusResponseProto {

    optional EventResponseStatus status = 1;

}

message receiveTypingStatusProto {

    optional string roomuuid = 1;
    optional string useruuid = 2;
    optional bool typingstatus = 3;

}

message sendReadConfirmationRequestProto {

    repeated string chatmessageuuid = 1;
    optional string useruuid = 2;

}

message sendReadConfirmationResponseProto {

    optional EventResponseStatus status = 1;

}

message receiveReadConfirmationProto {

    repeated string chatmessageuuid = 1;
    optional string useruuid = 2;

}

message loginRequestProto {

    optional string useruuid = 1;
    //broadcasts online status to all people

}

message loginResponseProto {

    optional EventResponseStatus status = 1;
    //TODO !!! remove this for rooms that user is not the owner of
    repeated ChatRoomProto room = 2;

}

message logoutRequestProto {

    optional string useruuid = 1;

}

message logoutResponseProto {

    optional EventResponseStatus status = 1;

}

message receiveOnlineStatusProto {

    optional string useruuid = 1;
    optional bool onlinestatus = 2;

}

message createChatRoomRequestProto {

    optional string useruuid = 1;
    optional string roomname = 2;

}

message createChatRoomResponseProto {

    optional EventResponseStatus status = 1;
    //TODO !!! remove this for rooms that user is not the owner of
    repeated ChatRoomProto room = 2;

}

message addUserToChatRoomRequestProto {

    optional string useruuid = 1;
    optional string roomuuid = 2;

}

message addUserToChatRoomResponseProto {

    optional EventResponseStatus status = 1;

}

message setUserDetailsRequestProto {

    optional string useruuid = 1;
    optional ChatUserDetails details = 2;

}

message setUserDetailsResponseProto {

    optional EventResponseStatus status = 1;

}

message setRoomTranslationSettingsRequestProto {

    optional string useruuid = 1;
    optional string roomuuid = 2;
    optional TranslateLanguage language = 3;
    repeated ChatMessageProto messages = 4;

}

message setRoomTranslationSettingsResponseProto {

    optional EventResponseStatus status = 1;
    repeated ChatMessageProto messages = 2;

}

message removeUserFromChatRoomRequestProto {

    optional string useruuid = 1;
    optional string roomuuid = 2;

}

message removeUserFromChatRoomResponseProto {

    optional EventResponseStatus status = 1;

}

message receiveRoomNotification {

    optional string roomuuid = 1;
    optional string content = 2;

}